<header class="bg-base-200 shadow-2xl fixed top-0 left-0 right-0 z-50">
  
  <div class="p-0 navbar px-4 bg-base-100">
    {{!-- LOGO --}}
    <div class="flex-1">
      <div class=" h-[4rem] flex items-center">
        <a 
          class="btn btn-ghost normal-case text-2xl" 
          href="{{@site.url}}
        ">
          <span class="bg-clip-text text-gradient-ps font-bold uppercase">
            {{@site.title}}
          </span>
        </a>
      </div>
    </div>

    {{!-- MAIN NAVIGATION --}}
    <div class="flex gap-4">
      {{!-- MOBILE DRAWER - DESKTOP NAVBAR --}}
      <div id="header-right" class="fixed pt-12 pb-4 px-4 md:p-0 top-0 left-0 right-0 bottom-0 bg-base-300 md:static md:bg-transparent flex flex-col-reverse md:flex-row justify-end gap-4 z-10 -translate-y-full transition-all md:translate-y-0">
        <nav class="prose-ul:flex prose-ul:flex-col prose-ul:md:flex-row md:flex md:items-center">
          {{navigation}}
        </nav>
      </div>
      {{!-- BURGER MENU --}}
      <div class="flex items-center md:hidden relative z-50">
        <button class="btn btn-ghost btn-sm btn-square gh-burger">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" 
            xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" 
              stroke-width="2" d="M4 6h16M4 12h16M4 18h16">
            </path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <div class="bg-base-200 bg-gradient-to-r from-primary to-secondary px-4 py-1"></div>

</header>





<script class="hidden">
  /**
    * All themes supported by the application. The array index is used to determine the order of the themes in the dropdown.
    */
    const themes = [
      'default', 
      'cupcake', 
      'tuttifrutti', 
      'mango',
    ]


    /**
    * Creates a one year expiration date for a cookie.
    */
    const createExpiration = () => {
      const aYearFromNow = new Date()
      aYearFromNow.setFullYear(aYearFromNow.getFullYear() + 1)
    }

    /**
    * Gets a cookie by name.
    * @param {string} name 
    * @returns 
    */
    const getCookie = (name) => {
      const cookies = document.cookie.split(';')
      const cookie = cookies.find(c => c.trim().startsWith(name))
      if (!cookie) return null
      return cookie.split('=')[1]
    }

    /**
    * Sets a cookie.
    * @param {string} name 
    * @param {string} value 
    */
    const setCookie = (name, value) => {
      const expiration = createExpiration()
      document.cookie = `${name}=${value};expires=${expiration};path=/`
    }

    /**
    * Gets the default theme from the cookie or sets it if it doesn't exist.
    * @returns string
    */
    const getDefaultTheme = () => {
      const theme = getCookie('theme')
      if (!theme) {
        setCookie('theme', 'default')
        return 'default'
      }
      return theme
    }

    /**
    * Generates the theme switcher dropdown.
    * @param {string} defaultTheme
    */
    const generateThemeSwitcher = (defaultTheme) => {
      // Create the button to open the dropdown
      const label = document.createElement('label')
      label.classList.add('select', 'select-xs', 'flex', 'items-center', 'm-1')
      label.innerText = 'ThÃ¨me'
      label.setAttribute('tabindex', '0')

      // Create the options for the dropdown
      const options = themes.map(theme => {
        const li = document.createElement('li')
        const button = document.createElement('button')
        button.innerText = theme
        button.addEventListener('click', () => changeTheme(theme))
        if (theme === defaultTheme) button.classList.add('active')
        li.append(button)
        return li
      })
      // Create the dropdown
      const ul = document.createElement('ul')
      ul.classList.add('dropdown-content', 'menu', 'p-2', 'shadow', 'bg-base-300', 'rounded-box', 'border', 'border-base-content', 'border-opacity-50')
      ul.append(...options)
      ul.id = 'theme-dropdown'
      const dropdownContainer = document.createElement('div')
      dropdownContainer.classList.add('dropdown', 'dropdown-end')
      dropdownContainer.append(label)
      dropdownContainer.append(ul)
      const div = document.createElement('div')
      div.append(dropdownContainer)
      div.classList.add('flex', 'justify-center', 'gap-4')
      const container = document.querySelector('#header-right')
      container.append(div)
    }

    /**
    * Changes the theme of the site.
    * @param {string} theme 
    */
    const changeTheme = (theme) => {
      const html = document.querySelector('html')
      html.setAttribute('data-theme', theme)
      setCookie('theme', theme)
      const ul = document.querySelector('#theme-dropdown')
      const buttons = ul.querySelectorAll('button')
      buttons.forEach(button => button.classList.remove('active'))
      const index = themes.findIndex(t => t === theme)
      buttons[index].classList.add('active')
    }

    const initTheme = () => {
      const defaultTheme = getDefaultTheme()
      document.querySelector('html').setAttribute('data-theme', defaultTheme)
      generateThemeSwitcher(defaultTheme)
    }
    initTheme()
</script>